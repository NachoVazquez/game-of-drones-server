// <auto-generated />
using System;
using GameOfDrones.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameOfDrones.DataAccess.Migrations
{
    [DbContext(typeof(GameOfDronesContext))]
    [Migration("20190208195332_CreateDomainTableAndRelations")]
    partial class CreateDomainTableAndRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameOfDrones.Core.Domain.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int?>("Player1Id");

                    b.Property<long>("Player1RoundsWon");

                    b.Property<int?>("Player2Id");

                    b.Property<long>("Player2RoundsWon");

                    b.Property<int>("RoundsToWin");

                    b.HasKey("Id");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameOfDrones.Core.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GamesLost");

                    b.Property<long>("GamesWon");

                    b.Property<long>("RoundsLost");

                    b.Property<long>("RoundsWon");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("GameOfDrones.Core.Domain.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("GameId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("Player1Move");

                    b.Property<int>("Player2Move");

                    b.Property<int>("WinnerMove");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("GameOfDrones.Core.Domain.Models.Game", b =>
                {
                    b.HasOne("GameOfDrones.Core.Domain.Models.Player", "Player1")
                        .WithMany("GamesAsPlayer1")
                        .HasForeignKey("Player1Id");

                    b.HasOne("GameOfDrones.Core.Domain.Models.Player", "Player2")
                        .WithMany("GamesAsPlayer2")
                        .HasForeignKey("Player2Id");
                });

            modelBuilder.Entity("GameOfDrones.Core.Domain.Models.Round", b =>
                {
                    b.HasOne("GameOfDrones.Core.Domain.Models.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
